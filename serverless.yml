# Project your project
service: blog-src
plugins:
  - serverless-jetpack
  - serverless-prune-plugin
custom:
  prune:
    automatic: true
    number: 1
provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  stage: dev
  stackName: App-dev-blog-service
  role: arn:aws:iam::050752626146:role/LambdaExecutionRole
  memorySize: 1024
  timeout: 29
  versionFunctions: false
  endpointType: regional
  tracing:
    lambda: true
  stackTags:
    environment: dev
functions:
  FetchBlogFunction:
    handler: handler.getAllBlogs
    description: Fetch Service
    name: App-FetchFunction-dev
    environment:
      XRAY_ENABLED: true
      STAGE: dev
    events:
      - http:
          path: fetchblog
          method: get
          private: false
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
            methods:
              - GET
              - POST
              - PATCH
              - PUT
              - DELETE
              - OPTIONS       
  AddBlogFunction:
    handler: handler.addBlog
    description: Add Service
    name: App-Add-Blog-Function-dev
    environment:
      XRAY_ENABLED: true
      STAGE: dev
      SNS_TOPIC_ARN: arn:aws:sns:us-east-1:050752626146:blog-app-notification
    events:
      - http:
          path: addblog
          method: post
          private: false
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
            methods:
              - GET
              - POST
              - PATCH
              - PUT
              - DELETE
              - OPTIONS     
  DeleteBlogFunction:
    handler: handler.deleteBlog
    description: Delete Blog Service
    name: App-Delete-Blog-Function-dev
    environment:
      XRAY_ENABLED: true
      STAGE: dev
    events:
      - http:
          path: deleteblog
          method: delete
          private: false
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
            methods:
              - GET
              - POST
              - PATCH
              - PUT
              - DELETE
              - OPTIONS    
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Origin, X-Requested-With, Content-Type, Accept, Authorization'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDEFAULT5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Origin, X-Requested-With, Content-Type, Accept, Authorization'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
package:
  exclude:
    - coverage/**
    - test/**
    - package-lock.json
    - .npm/**
    - .idea/**